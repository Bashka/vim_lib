*vim_lib.txt*		Для Vim версии 7.0.		*vim_lib*

			РУКОВОДСТВО ПО VIM_LIB

1. Описание						|vim_lib-description|
2. Пакет base						|vim_lib-base|
  2.1. Object						|vim_lib-base-object|
  2.2. Stack						|vim_lib-base-stack|
  2.3. List						|vim_lib-base-list|
  2.4. Dict						|vim_lib-base-dict|
  2.5. Buffer						|vim_lib-base-buffer|
  2.6. Test						|vim_lib-base-test|
3. Пакет sys						|vim_lib-sys|
  3.1. Plugin						|vim_lib-sys-plugin|
  3.2. NullPlugin					|vim_lib-sys-nullplugin|

================================================================================
1. Описание						*vim_lib-description*

Vim_Lib - это объектно-ориентированная библиотека, включающая множество
готовых решений низкоуровневых задач на языке VimScript. Библиотека
подключается в виде autoload плагина, что позволяет загружать ее компоненты
"по требованию".

Библиотека имеет многоуровневую, вложенную структуру, которая включает:

  - Пакеты - каталоги классов, группирующие их по области применения. К ним
    относятся такие пакеты, как |vim_lib-base|, |vim_lib-sys| и так далее
  - Классы - минимальные компоненты библиотеки, решающие конкретные задачи и
    объединяющие общую логику. К ним относятся такие классы, как 
    |vim_lib-base-Object|, |vim_lib-base-Stack|, |vim_lib-sys-Plugin| и так далее

Все классы библиотеки являются дочерними, по отношению к классу 
|vim_lib-base-Object|, что унифицирует их интерфейс и приводит к единому
формату использования, а именно:
>
	let s:Stack = vim_lib#base#Stack# " Создаем псевдоним (alias) класса
	let s:stk = s:Stack.new()         " Инстанциируем класс
	" Используем объект
	let s:stk.push(1)
	echo s:stk.pop()

Из примера видно, что программный код, использующий любой класс библиотеки,
состоит из трех компонентов:

  - Создание псевдонима - данная операция позволяет не только сократить имя
    класса, но и явно назвать те компоненты библиотеки, которые используются
    данным кодом
  - Инстанциация класса - создание экземпляра класса с помощью конструктора new 
  - Использование объекта - применение объекта для решения конкретных задач

Помимо классов, библиотека включает подробную документацию их интерфейса и
модульные тесты, гарантирующие ожидаемую работу компонентов. Документация
содержится внутри файлов классов, а тесты в каталогах "tests" каждого пакета
библиотеки.

================================================================================
2. Пакет base						*vim_lib-base*

Пакет base включает базовые, низкоуровневые классы библиотеки.

2.1. Object						*vim_lib-base-object*
-----------

Класс Object является родителем всех классов библиотеки и реализует базовый 
интерфейс объектов, а именно:

  - Структура объектов - свойства 'class' и 'parent', определенные во всех объектах
  - Конструктор - метод 'new', используемый для инстанциации класса
  - Механизм наследования - метод 'expand', используемый для расширения
    функциональности класса за счет реализации его потомков
  - Базовая типизация - метод 'typeof', используемый для определения
    принадлежности класса к целевой иерархии наследования

Все объекты класса Object или его подклассов представляют обычные словари. При
этом свойства определены как экземпляры этих словарей, а методы как 'dict' 
функции. Для связи объекта с классом, его породившим, создается свойство
'class', которое ссылается на объект класса. Если объект является экземпляром
подкласса, то в нем определяется свойство 'parent', содержащее ссылку на
соответствующий объект надкласса. Аналогичную ссылку имеют все подклассы. 
Другими словари при создании объекта дочернего класса, автоматически создаются 
объекты всех надклассов, связанные снизу вверх с помощью свойства 'parent'. 
Такое решение позволяет не смешивать свойства объектов между собой, а так же 
разделять логику конструктора между объектами.

Для создания объекта, достаточно воспользоваться конструктором 'new':
>
	let s:obj = s:MyClass.new() " Метод может принимать параметры

Конструктор, как и все методы класса Object являются статичными, то есть не
переносятся в экземпляр класса, что не позволяет вызвать конструктор от имени
объекта. Если же необходимо создать объект того же класса, что и исходный
объект, необходимо использовать ссылку 'class':
>
	let s:otherObj = s:obj.class.new() " class ссылается на s:MyClass

Основой целью класса Object является реализация механизма наследования и
расширения существующих классов. Это достигается благодаря методу 'expand'.
Для расширения класса через наследование необходимо:

  - Использовать метод 'expand' у надкласса для создания заготовки
  - Реализовать конструктор 'new'
  - Реализовать методы класса

Метод 'expand' создает новый словарь и добавляет к нему все методы класса
Object, а так же свойство 'parent', которое ссылается на родительский класс.
Этот словарь будет возвращен из метода и определит заготовку будущего класса.

Для реализации конструктора нового класса необходимо переопределить метод
'new' для заготовки, создаваемой методом 'expand'. Конструктор может принимать
любое число аргументов, с помощью которых будут инициализировать экземпляры
этого класса. Конструктор должен создавать новые словари для всех надклассов, 
определять ссылки 'class' и 'parent', а так же инициализировать свойства
будущего объекта. Сделать это можно следующим способом:

  - Создать заготовку объекта с помощью метода 'bless' класса Object, передав
    ему результат работы конструктора надкласса
  - Определить для полученной заготовки свойства не переопределяя ссылки
    'parent' и 'class'
  - Вернуть получившийся объект 

После определения конструктора класса, необходимо реализовать его методы. Для
этого достаточно создать 'dict' функции для полученного класса, которые будут
обращаться к свойствам экземпляров этого класса через переменную 'self':
>
	function! s:MyClass.getA()
		return self.a
	endfunction

Важно помнить, что методы класса относятся к тому объекту, в классе которого
они были объявлены. Так, если в классе Parent реализован метод getA, то в
объекте его подкласса Child, этот метод будет доступен только через ссылку
'parent' объекта:
>
	echo s:child.parent.getA()

Это связано с тем, что для каждого класса создается отдельный объект, хранящий
его свойства.

Более подробно познакомиться с механизмом наследования вы можете на примере
классов "vim_lib/autoload/base/tests/Object/Parent" и 
"vim_lib/autoload/base/tests/Object/Child".

2.2. Stack						*vim_lib-base-stack*
----------

Класс Stack представляет список данных, организованный по принципу LIFO. Класс
реализует несколько методов манипулирования стеком, а так же метод 'length',
вычисляющий текущую длину стека (число элементов в нем).

Изначально экземпляр данного класса пуст, для добавления в него элементов
используется метод 'push', который вставляет данные в ввершину стека. Метод
'pop' наоборот выталкивает данные из вершины и возвращает их. Если необходимо
получить данные с вершины стека без выталкивания, используется метод
'current'.

Пример:
>
	let s:Stack = vim_lib#base#Stack#
	let s:stk = s:Stack.new()
	call s:stk.push(1)
	call s:stk.push(2)
	echo s:stk.length() " 2
	echo s:stk.pop()    " 2
	echo s:stk.pop()    " 1
	echo s:stk.length() " 0

2.3. List						*vim_lib-base-list*
---------

Класс List представляет упорядоченный, изменяемый список данных с доступом к 
элемента по индексу. Класс реализует основные методы для доступа к элементам 
списка, управления им и получения информации о его структуре.

Список List может быть инициализирован при инстанциации любым массивом, либо
быть пустым. Для определения или получения значений элементов списка 
используется метод 'item'. Для выделения среза используется метод 'sec'. Метод
'length' позволяет определить длину (число элементов) списка.

Пример:
>
	let s:List = vim_lib#base#List#
	let s:lst = s:List.new([1,2,3])
	call s:lst.item(0, 5)
	echo s:lst.item(0)    " 5
	echo s:lst.length()   " 3
	echo s:lst.list()     " [5,2,3]

2.4. Dict						*vim_lib-base-dict*
---------

Класс Dict представляет изменяемый словарь данных с доступом к элемента по 
ключу. Класс реализует основные методы для доступа к элементам словаря, 
управления им и получения информации о его структуре.

Словарь Dict может быть инициализирован при инстанциации любым словарем или 
массивом следующей структуры:
>
	[[ключ, значение], ...]

либо быть пустым. Для определения или получения значений элементов словаря 
используется метод 'item'. Для выделения элементов словаря, таких как ключи,
значения и так далее, используются методы 'keys', 'vals' и 'items'. Метод
'length' позволяет определить длину (число элементов) словаря.

Пример:
>
	let s:Dict = vim_lib#base#Dict#
	let s:dct = s:Dict.new({'a': 1})
	call s:dct.item('b', 2)
	echo s:dct.length()     " 2
	echo s:dct.item('a')    " 1
	echo s:dct.keys()       " ['a', 'b']

2.5. Buffer						*vim_lib-base-buffer*
-----------

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.

2.6. Test						*vim_lib-base-test*
---------

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.

================================================================================
3. Пакет sys						*vim_lib-sys*

Пакет sys включает классы, представляющие различные компоненты редактора (за
исключением визуальных), а так же расширения.

3.1. Plugin						*vim_lib-sys-plugin*
-----------

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.

3.2. NullPlugin						*vim_lib-sys-nullplugin*
---------------

Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod
tempor invidunt ut labore et dolore magna aliquyam erat, sed diam voluptua. At
vero eos et accusam et justo duo dolores et ea rebum. Stet clita kasd gubergren,
no sea takimata sanctus est Lorem ipsum dolor sit amet.

vim:tw=78:ts=8:ft=help:norl:colorcolumn=+2:
